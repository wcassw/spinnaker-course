== Lab: Deploying EKS Microservices

=== Overview

image::ex1_overview.png[width="80%", height="80%"]

=== Preliminary

. Please work in a group
.. If we are remote, we have break out rooms!
.. We will be running a lot of instances 
.. Dev-ops is maddening
. We will let a fun service decide your teamname: http://creativityforyou.com/combomaker.html
. Select a leader of your group, they will need a public github account and generate a token
. The leader should provide a token to the administrator, via virtual chat, slack, or email

=== The instructor is your administrator!

Your instructor will:

  * Create an ECR repository
  * Create a github connection using a token

=== Forking A Repository

. Leaders, Fork the repository https://github.com/dhinojosa/spinnaker-study into your own public github account.
. Non-leaders, you can fork the repository from your leader
. Notice the `manifests/deploy-microservice.yml` file, and see the Deployment, and the Service

WARNING: We will have one of you set up a token in your github repository, which will provide access to the spinnaker server, please delete at the end of class.

=== Editing your manifest

. In your personal fork, edit your `manifest/deploy-microservice.yml`
. Perform a _replace all_ in the document and replace `mild-temper` with `<your-team-name>-microservice`
. Save file, commit, and push your file in your repository

=== Setting up a Jenkins job

. Open Jenkins at http://jenkins.di-labs.org:8080/ and login with the username *spinnaker* and password *timeisluxury*
. Click on *New Item*, and a *Pipeline Job* in Jenkins
. Name your job *<your-team-name>-microservice*, and click *Ok*
. Under *Build Triggers*, select *Poll SCM*, and in the text area enter `* * * * *`
. Under *Pipeline*, change *Definition* to *Pipeline Script from SCM*
. Change *SCM* to `Git`, and enter your repository URL that you cloned for your team

.Selecting `Jenkinsfile` that is stored already on the repository
image::jenkins-pipeline.png[]

'''

.Selecting the Repository itself.
image::jenkins-scm.png[]

=== Setting up a Spinnaker Application

. Open Spinnaker at http://spinnaker.di-labs.net, this is not secure so don't place any personal information:
. Once there create an Application with the name: *<your-team-name>-microservice*
. Add an email
. In Repo Type add `github`
. In Description, add a description of your choosing
. Create an instance port of `80`

.Creating a Spinnaker Application
image::create_application.png[width="50%", height="50%", align="center"]

=== Creating a Pipeline

. Click on Pipelines, and click on "Configure a new pipeline"
. Under *Pipeline Name*, name it "ToStaging"

image::pipelines-icon.png[align="center"]

=== Github Expected Artifact

We will require two artifacts:

* The Deployment `yaml` from Github
* The Docker Container from ECR

=== Setting up the Github Expected Artifact

. In *Configuration* under the *Expect Artifacts* section, click on *Add Artifact*
. In *Account* field, choose your `github` account
. In *File Path*, enter `manifests/deploy-microservice.yml`, remember where you saw this entry
. In *Display Name*, enter 'deploy-microservice.yml'
. Check *Use Default Artifact* 
. Select your determined `github` account
. Enter in your content url and keep in mind this is a different kind of url: 
   `https://api.github.com/repos/$ORG/$REPO/contents/$FILEPATH`

For Example:
   `https://api.github.com/repos/pascal71/spinnaker-study/contents/manifests/deploy-microservice.yml`

. In *Commit/Branch* enter `master`

=== Docker Registry Artifact

. In *Configuration* under the *Add Artifacts* section, click on *Add Artifact*
. In *Account*, choose *Docker Registry* Account
. In *Docker Image*, add `465848653329.dkr.ecr.us-west-2.amazonaws.com/` followed by your <team-name>-microservice name. This will typically be your project name followed by `microservice`, ask the instructor to show what is on the ECR, or have them show you.
. In *Display Name*, enter '**<your-team-name>**-microservice'

image::docker-registry.png[]

NOTE: If this doesn't work, later we can add a default tag to the container

=== Adding a Docker Registry Container Trigger

. In *Automated Triggers* section, click *Add Trigger*
. In the *Type* drop-down field, select *Docker Registry*
. In the *Registry Name* field, select `my-ecr-registry`
. In the *Image* field, select your image

image::docker-registry-trigger.png[]

NOTE: If your image name does not show, ask the administrator to add that to ECR

=== Adding a Notification

. In the *Notifications* Section, click *Add Notification Preference*, this will produce a dialog box
. In the *Notify Via*, select `Email`
. In the *Email Address*, enter your email address
. Select all the boxes for all notification

NOTE: This will get annoying over time, turn it off if needed. 

=== Save Changes

. Click the Save Changes Button

image::save-changes.png[]

=== Adding a Deploy Stage

image::spin-pipeline.png[]

. In your pipeline, click on the *Add Stage* button
. In the *Type* field, select *Deploy (Manifest)*
. This will present some new sections and fields
. Go to the *Deploy (Manifest) Configuration* and *Basic Settings* section, in *Account* select `eks-stage`
. In the *Manifest Configuration* section, and for the *Manifest Source*, select *Artifact*
. In the *Manifest Artifact* select your `deploy-microservice.yaml` file
. In the *Required Artifacts to Bind* select your container artifact binding

image::deploy-manifest.png[]

=== Deploying to Staging

. Click on the pipelines icon image:pipelines-icon.png[width="20%", height="20%"]
. Click on *Start Manual Execution*
. Check Results
. If it doesn't work, check configurations

image::pipeline-menu.png[]

=== Deploying to Production

=== Creating a Pipeline

. Click on Pipelines, and click on "Configure a new pipeline"
. Under *Pipeline Name*, name it "ToProd"

image::pipelines-icon.png[align="center"]


=== Production Artifacts

. Declare the two artifacts that you expect from the previous pipeline
.. One would be the Github reference to your kubernetes `yml` file
.. The other would be a reference to your Docker artifact

image::prod_artifacts.png[]

=== Production Trigger

. In the new Pipeline Configuration, go to *Automatic Triggers*
. In the *Type* field select *Pipeline*
. In the *Application* field select your Application name (e.g. teama-microservice)
. In the *Pipeline* field select *ToStaging*, which was the pipeline that was created
. In the *Pipeline Status* select *Successful*
. For *Artifact Constraints* add `deploy-microservice.yml` and `<your-team-name>-microservice-container`

image::prod_trigger.png[]

=== Adding a Deploy to Prod Stage

image::deploy_prod_0.png[]
image::deploy_prod_1.png[]

. In your pipeline, click on the *Add Stage* button
. In the *Type* field, select *Deploy (Manifest)*
. This will present some new sections and fields
. Go to the *Deploy (Manifest) Configuration* and *Basic Settings* section, in *Account* select `eks-prod`
. In the *Manifest Configuration* section, and for the *Manifest Source*, select *Artifact*
. In the *Manifest Artifact* select your `deploy-microservice.yml` file
. In the *Required Artifacts to Bind* select your container artifact binding

=== Put it all in motion

* Make a change in your repository
* Commit and Push
* Ensure that your pipeline works!

=== Bonus: Place a manual approve in stage

After you run initially and had time to play around

. Go back to the "ToStaging" pipeline
. Select the *Deploy (Manifest)* stage
. Click the *Add Stage* button
. Select *Manual Judgement*
. Add some descriptions in the *Instructions* field

=== Discover your space

* Ask the instructor for the ip address for your application
* Edit the `index.html` in the `src/main/resources/META-INF.resources/` folder
* Change the color, change the text
* Perform a `git push` and see the results

=== Things to discuss

* How do the yaml files work
* Ask the instructor to show the results on their `kubectl`
* What bad things happened?

image::stop.png[width="20%", height="20%", align="center"]
