== Overview

=== What is Spinnaker?

* Open Source, Multicloud Platform
* Release Software at high velocity and confidence
* Extends where Jenkins CI leaves off
* Manages Staging and Deployment
* Makes use of containers
* Provides Baking Ability and Canary Ability

=== Applications

* Represents the service which you are going to deploy using Spinnaker
* It is the center of your universe in regards to your application
* Contains all configuration for that service, and all the infrastructure on which it will run
* You will typically create a different application for each service

=== Inside the Application

* Firewalls
* Load Balancers
* Clusters of Services or Deployments
* Server Groups
* Canary Configurations

=== Clusters

* Logical Groups of Server Groups
* Does not map to a Kubernetes Cluster
* It _does_ map to a Kubernetes _Deployment_

image::overview_cluster.png[width="80%", height="80%"]

Source: https://www.spinnaker.io/reference/providers/kubernetes/#cluster

=== Server Group

* Collection of Instances
* With Basic Configuration Settings
** Number of Instances
** Autoscaling Policies
** Their Metadata

=== Deployment Highlighted

.The Deployment is highlighted
image::deployment-overview.png[]

=== Replica Set Highlighted

.The Replica Set is highlighted
image::replica-set-overview.png[]

=== Replica Set History

* With deployments history of the deployments are maintained
* The following shows a history
* Deployments can be:
** _rolled back_
** _deleted_
** _restarted_
** _scaled_

=== Replica Set History 

image::deployment-history.png[]

=== Load Balancers

* Load Balancer is associated with:
** An ingress protocol
** Port range
* It corresponds to a Kubernetes _Service_
* It balances traffic among instances in its Server Groups.
* You can enable health checks for a load balancer
* Flexibility to define health criteria and specify the health check endpoint.

=== Load Balancing

image::overview_load_balancer.png[width=80%, height=80%]


=== Load Balancing with Ingress

The following shows the ingress protocol

image::overview_ingress.png[]

=== Firewalls

* Firewall defines network traffic access
* Firewall rules defined by an IP range (CIDR) along with a communication protocol (e.g., TCP) and port range
* It is associated with Kubernetes Network Policies

Source: https://www.spinnaker.io/reference/providers/kubernetes-v2/#networkpolicies

=== Pipeline

image::overview_pipeline.png[]

* Key deployment management construct in Spinnaker
* Manage deployments in a consistent, repeatable and safe way.
* Consists of a sequence of actions, known as _stages_
* Possibility to pass parameters from stage to stage along the pipeline


=== Pipelines Continued

image::overview_pipeline.png[]

* Includes _scaffolding functions_ (manual judgment, wait, run Jenkins job) that together precisely defines your runbook for managing your deployments
* Started manually or triggered by an event:
** `git push`
** Docker image upload
** CRON Schedule
* You can emit notifications

=== Pipeline Anatomy

* Define your sequence of stages at the top.
* Spinnaker supports parallel paths of stages, as well as the ability to specify whether multiple instances of a pipeline can be run at once.
* Specify details for a given stage in the sections underneath the pipeline.

image::https://www.spinnaker.io/concepts/pipelines/edit-pipeline.png[width=75%, height=75%]

=== Viewing Pipeline Execution History

* Serves as a means to introspect details of each deployment operation 
* An effective audit log of enforced processes/policies on how you make changes to your deployed applications landscape.

image::pipeline_execution.png[]

=== Stage

image::overview_stage.png[]

* Atomic building block for a pipeline
* Sequenced to form a pipeline
* Spinnaker provides multiple stages:
** Deploy
** Resize
** Disable
** Manual Judgment

https://www.spinnaker.io/reference/pipeline/stages/

=== One Stage, Multiple Steps; One Step, Multiple Actions

image::https://www.spinnaker.io/concepts/pipelines/pipeline-tasks.png[]

* Automation does not end with orchestrating only the high-level steps of your release process
* Each of these operational steps often corresponds to a sequence of calls to the cloud platform
* Each of which needs to be remediated in failure scenarios
* The red/black Deploy stage is an example of how Spinnaker fully supports this notion

=== Breaking Down the Stage

image::https://www.spinnaker.io/concepts/pipelines/pipeline-tasks.png[]

* The Red/Black Deploy stage in Spinnaker actually entails a sequence of steps
* Each given step is actually a set of tasks that need polling, remediation to ensure requisite state is reached prior to proceeding
* A given task often entails multiple API calls to the specific cloud platform, cognizant of expected response codes and remediating actions in failure

=== Clusters

Source: https://www.spinnaker.io/concepts/clusters/

image::overview_clusters.png[]

=== Cluster Definition

* Spinnaker acts as a single pane of glass from which to manage your global deployments across multiple clouds!
* Contains information related to:
** Health and status of running environments
** Metadata around deployments and individual instances

* Also ability to perform ad-hoc actions you can perform on the resources you see such:
** resize
** clone
** disable
** roll back

[.columns]
=== Left Pane

[.column]
--
image::overview_clusters.png[]
--

[.column]
--
** Filters for viewing your deployed services. 
** Search by string match, or narrow by specific attributes of your services,such as:
*** Cloud platform
*** Region
*** Designated environments and stacks.
--

[.columns]
=== Main Pane

[.column]
--
image::overview_clusters.png[]
--

[.column]
--
* Lists the deployed services.
* Green chiclets are individual instances (pods)
* All grouped into Server Groups (a particular deployment)
--

[.columns]
=== Right Pane

[.column]
--
image::overview_clusters.png[]
--

[.column]
--
** Provides details for the item currently selected in the center section
** For each item, Spinnaker provides details related to both application-level concerns (Jenkins job details) as well as infrastructure-level concerns (machine type, auto-scaling policies).
--

=== Spinnaker Process

. Create an Application
  * One Application per Microservice
. Define your Infrastructure
  * Define infrastructure for each application
  * Pipelines deploy services to the server groups you define
  * NOTE: Not necessary since you can define infrastructure from pipeline
. Create a Pipeline
  * Create all the pipelines needed to deploy the service or services covered by the application
. Run your Pipeline
  * Automatic
  * Triggered

Source: https://www.spinnaker.io/guides/user/get-started/

=== Cloud Providers

=== Overview

* A Cloud Provider is an interface to a set of virtual resources that Spinnaker has control over.
* Typically, this is a IaaS provider, like AWS, or GCP
* It can also be a PaaS, like App Engine, or a container Orchestrator, like Kubernetes.
* The cloud provider is central to everything you do in Spinnaker. 
** It’s where you deploy your Server Groups, the source of your deployable artifacts
** and the subject of automation via Pipelines.

=== Accounts

* An Account is a named credential Spinnaker uses to authenticate against a cloud provider.
* Each provider has slightly different requirements for what format credentials can be in, and what permissions they need to have afforded to them. 
* Each Supported Provider has their own way to create an account and register the credentials with *Halyard*.
* Keep in mind that every Provider can have as many accounts added as desired
** This will allow you to keep your environments (e.g. staging vs. prod):
*** Separate
*** Restrict access to sets of resources using Spinnaker’s Authorization mechanisms

=== Cloud Providers Supported

* App Engine
* Amazon Web Services
* Azure
* Cloud Foundry
* DC/OS
* Docker v2 Registry (Note: This only acts as a source of images, and does not include support for deploying Docker images)
* Google Compute Engine
* Kubernetes
* Oracle

