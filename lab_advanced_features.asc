== Lab: Advanced Features

=== Create an Application

. Create a new Application in Spinnaker, call it "<your-team-name>-canary"
. Use the same repository
. Disable your second application

=== Turn on Canary

In the configuration of application be sure to turn on *Canary*

image::features_panel.png[]

=== Creating a Pipeline

* Create a Pipeline called "ToStaging"
* Create one Trigger, for Jenkins
** For *Type* select "Jenkins"
** For *Controller* select "jenkins-master"
** For *Job* select your job from Jenkins
** In *Property File*, enter `spinnaker.properties`
** Ensure that the Trigger is enabled

=== Create Deploy Manifest Stage

* Building off of **Configuration**, create a `Deploy (Manifest)` stage
* For *Stage Name*, enter `Deploy Canary`
* In *Basic Settings*, for *Account*, enter `eks-stage`
* In the *Manifest Source*
** Select *Text*
** Enter the following manifest, replacing `your-team` with your team name

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: your-team-microservice-canary
    release: canary
    source: demo
    stack: frontend
  name: your-team-microservice-canary
  namespace: microservices
spec:
  replicas: 3
  selector:
    matchLabels:
      run: your-team-microservice-canary
  template:
    metadata:
      labels:
        app: your-team-microservice-canary
        release: canary
        run: your-team-microservice-canary
        source: demo
    spec:
      containers:
        - image: >-
            465848653329.dkr.ecr.us-west-2.amazonaws.com/your-team-microservice:${trigger['properties']['BUILD_ID']}
          name: your-team-microservice-canary
          ports:
            - containerPort: 8080
              name: web
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: your-team-microservice-service-canary
  name: your-team-microservice-service-canary
  namespace: microservices
spec:
  ports:
    - name: web
      port: 30201
      protocol: TCP
      targetPort: 8080
  selector:
    app: your-team-microservice-canary
    source: demo
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    release: lasertag
  name: your-team-microservice-service-monitor-canary
spec:
  endpoints:
    - interval: 30s
      path: /metrics
      port: web
  namespaceSelector:
    matchNames:
      - microservices
  selector:
    matchLabels:
      app: your-team-microservice-service-canary
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: your-team-ingress-canary
  namespace: microservices
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: your-team-microservice-service-canary
              servicePort: 30201
            path: /your-team/canary(/|$)(.*)
----

* Run your *Jenkins* pipeline, to start the process
* We will need the trigger information to deploy

=== Notice the annotations

Go to the source code and locate the _src/main/java/org/acme/metrics/PrimeNumberChecker.java_ file

[source, java, subs="attributes,quotes,verbatim"]
----
@GET
@Path("/{number}")
@Produces("text/plain")
@Counted(name = "performedChecks", 
         description = "How many primality checks have been performed.")
@Timed(name = "checksTimer", 
       description = "A measure of how long it takes to perform the primality test.",
       unit = MetricUnits.MILLISECONDS)
----

=== View the metrics of your microservice

. Visit `http://<url>/<team-name>/canary/prime/<prime-number>` with a few numbers both prime, and non-prime
. In the URL of your application, go to the `metrics` folder of your microservice.`http://<url>/<team-name>/canary/metrics`
. Notice the results

=== Discovering Prometheus

. Visit http://a2249ab3388d611ea998c02a0bc80a9f-1212167874.us-west-2.elb.amazonaws.com:9090/graph
. In the dropdown that contains states -insert metric at cursor select `application_org_acme_metrics_PrimeNumberChecker_checksTimer_mean_seconds`
. Ensure that your information is being reported

=== Create a Production Instance

* Ask your instructor if there is already a production instance with the name `<your-team>-microservice` deployment
* *If not*, you can instantly create one with the following steps
** In an editor, replace `your-team` with your team name in the YAML file below
** Replace the `<version>` with the latest build version number of your application
** Go the *Infrastructure* Tab of your Application
** Click on *Create Server Group*
** Paste your amended yaml file
** Deploy to the Account *eks-prod*, this will be your baseline

[source, yaml, subs="attributes,quotes,verbatim"]
----
kind: Deployment
apiVersion: apps/v1
metadata:
    labels:
        app: your-team-microservice
        stack: frontend
        source: demo
    name: your-team-microservice
    namespace: microservices
spec:
    replicas: 3
    selector:
        matchLabels:
            run: your-team-microservice
    template:
        metadata:
            labels:
                app: your-team-microservice
                run: your-team-microservice
                source: demo
        spec:
            containers:
                -   image: 465848653329.dkr.ecr.us-west-2.amazonaws.com/your-team-microservice:<version>
                    name: your-team-microservice
                    ports:
                        -   name: web
                            containerPort: 8080
---

kind: Service
apiVersion: v1
metadata:
    labels:
        app: your-team-microservice-service
    name: your-team-microservice-service
    namespace: microservices
spec:
    selector:
        source: demo
        app: your-team-microservice
    ports:
        -   name: web
            protocol: TCP
            port: 30201
            targetPort: 8080
---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
    annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$2
    name: your-team-ingress
    namespace: microservices
spec:
    rules:
        -   http:
                paths:
                    -   path: /your-team(/|$)(.*)
                        backend:
                            serviceName: your-team-microservice-service
                            servicePort: 30201

----

=== Create Canary Configs

. Click on *Delivery*, and *Canary Configs*
. On the left, click on *Add Configuration*
. For the *Configuration Name*, call it `<your-team>-config`

image::ex3_canary_config.png[]

=== Add a Metric

. In the *Metrics* section, select *Group 1*, and click on *Add Metric*
. In your dialog box, 

.Initial Canary Config
image::ex3_canary_config.png[]

.Adding a Metric
image::ex3_canary_metrics.png[]

=== Configuration of the Metric

* In the dialog box, in the *Name* field, enter `mean_seconds`
* In the *Fail On* field, select *Increase*
* For the *NaN Strategy*, leave the *Default (remove)*
* For the *Query* type, select *Default*
* For *Metric Name*, add a few letters, `app`, and select `application_org_acme_metrics_PrimeNumberChecker_checksTimer_mean_seconds`
* In *Filter Template*, select *Create New*
* For the new *Filter Template*:
** Under the *Name* field enter `pod`
** For the *Template* enter `pod=~"${scope}.+"`

WARNING: Notice there are two *Save* Buttons

image::ex3_canary_metric_configure.png[]

=== Scoring

For Scoring, since we have one group, we will make that value `100`

image::ex3_scoring.png[]

=== Find Baseline

* While Selecting *Deploy Canary*, click on *Add Stage*
* Select `Find Artifacts From Resource (Manifest)`
* For *Stage Name* enter `Find Baseline`
* In the *Find Artifacts from Resource (Manifest) Configuration*
** In *Account* enter `eks-prod`
** In *Namespace* enter `microservices`
** In *Kind* enter `deployment`
** For Selector select "Choose a static target"
** For the *Name*, enter `<team-name>-microservice`

image::ex3_find_baseline.png[]

=== Deploy Baseline

* While Selecting *Find Baseline*, click on *Add Stage*
* Select `Deploy (Manifest)` 
* For *Stage Name* enter `Deploy Baseline`
* In *Basic Settings*, for *Account*, enter `eks-stage`
* In the *Manifest Source*
** Select *Text*
** Enter the following manifest, replacing `your-team` with your team name

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: your-team-microservice-baseline
    release: baseline
    source: demo
    stack: frontend
  name: your-team-microservice-baseline
  namespace: microservices
spec:
  replicas: 3
  selector:
    matchLabels:
      run: your-team-microservice-baseline
  template:
    metadata:
      labels:
        app: your-team-microservice-baseline
        release: baseline
        run: your-team-microservice-baseline
        source: demo
    spec:
      containers:
        - image: '${#stage(''Find Baseline'').context["artifacts"][0]["reference"]}'
          name: your-team-microservice-baseline
          ports:
            - containerPort: 8080
              name: web
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: your-team-microservice-service-baseline
  name: your-team-microservice-service-baseline
  namespace: microservices
spec:
  ports:
    - name: web
      port: 30201
      protocol: TCP
      targetPort: 8080
  selector:
    app: your-team-microservice-baseline
    source: demo
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    release: lasertag
  name: your-team-microservice-service-monitor-baseline
spec:
  endpoints:
    - interval: 30s
      path: /metrics
      port: web
  namespaceSelector:
    matchNames:
      - microservices
  selector:
    matchLabels:
      app: your-team-microservice-service-baseline
  targetLabels:
    - release app source
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: your-team-ingress-baseline
  namespace: microservices
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: your-team-microservice-service-baseline
              servicePort: 30201
            path: /your-team/baseline(/|$)(.*)
----

=== Perform a Canary Analysis

* While Selecting *DeployBaseline*, click on *Add Stage*
* Select `Canary Analysis` 
* For *Stage Name* enter or leave it as `Canary Analysis`
* In the *Canary Analysis Configuration* and *Analysis Config* section:
** In *Analysis Type*, select *Real Time (Manual)*
** In *Config Name*, select the config you just created `<your-team>-config`
** In *Lifetime*, select 4 minutes (or 2 if you want a shorter round)
** Ensure that *Loopback Type* is `Growing`
** In *Baseline* add `<your-team>-microservice-baseline`
** In *Canary* add `<your-team>-microservice-canary`
** In *Scoring Thresholds*, marginal should be `50`, and pass should be `50`

image::ex3_analysis_config.png[]

image::ex3_analysis_config_1.png[]

* Run your pipeline
* Visit both your canary and baseline deployments and run some numbers in the prime microservice!

NOTE: If it says "No Reason Provided", Run a Jenkins Job again, so it can get a build number

=== Delete tokens from Github

If you were the member of your team that was in charge of the github account, be sure to delete your token

=== Things to discuss

* How was the information scraped?
* How did spinnaker talk with prometheus
* Is this too much work? What's the payoff?

image::stop.png[width="20%", height="20%", align="center"]
