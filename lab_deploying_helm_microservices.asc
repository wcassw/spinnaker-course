== Lab: Deploying Helm Microservices

. Create a new Application, call it "<your-team-name>-baked"
. Use the same repository
. Create a new Pipeline called "ToStaging"
. Disable your first project's pipelines

=== Configuration

In the *Configuration* Stage:

. In *Expected Artifacts* click on *Add Artifact*
. Under *Match Against*, select *my-s3-account* 
. Leave *Object Path* blank
. For *Display Name*, enter `microservice-chart-tar-gz`
. Check *Use Default Artifact*
. In the *Account* field for the default artifact select *my-s3-account*
. In the *Object Path* enter: `s3://helm-charts-f2bba284-98d3-445b-9f04-a08c57b7d36f/${trigger['properties']['JOB_NAME']}/${trigger['properties']['BUILD_ID']}/quarkus-microservice-chart.tar.gz`
. Save

image::ex2_expected_artifact_0.png[]
image::ex2_expected_artifact_1.png[]

=== Creating a Jenkins Trigger

Create one Trigger, for Jenkins

. For *Type* select "Jenkins"
. For *Controller* select "jenkins-master"
. For *Job* select your job from Jenkins
. In *Property File*, enter `spinnaker.properties`
. Ensure that the Trigger is enabled


=== Bake a Manifest

. While *Configuration* is highlighted, click *Add Stage*
. Select *Bake Manifest*
. In your new set of fields, for *Render Engine*, select *HELM2*
. For the name, enter your team name, do not put the word `microservice`
. For *Expected Artifact*, select the `microservice-chart-tar-gz` you created in the last step
. In *Overrides*, enter new *Key* and *Value*
.. `releaseType` key with a value of `staging`
.. `tag` key with a value of `${trigger['properties']['BUILD_ID']}`

image::ex2_helm_0.png[]
image::ex2_helm_1.png[]

==== Producing Artifact

. Staying on the same stage, navigate down to *Produces Artifacts*
. In *Match Against* select kind as *Base 64*
. In the *name* field, enter your team name
. In the *Display Name* in the next section enter `baked-<teamname>-microservice`
. Save

image::produce_artifact.png[]

=== Create a Deploy Stage

. While the "Bake Manifest" Phase is selected, click *Add Stage*
. Select *Deploy Manifest*
. In *Basic Settings*, and in *Account*, select `eks-stage`, since we will deploy to stage
. In *Manifest Configuration*, and in *Manifest Source*, select *Artifact*
. In *Manifest Artifact* select the Base64 object you created in the last step `baked-<teamname>-microservice`
. Save

image::ex2_deploy_manifest.png[]

=== Put it all in motion

. Make a change in your repository
. Commit and Push
. Ensure that your pipeline works!

=== Bonus

. Create another pipeline called "ToProd"
. "To Prod" should expect the artifact from "ToStaging"
. Deploy the "Base64" artifact in the production cluster

=== Things to discuss

* Where did *my-s3-account* come from?
* What was that funk that we typed into the *Object Path*?
* What is the significance of to tar file?
** How is it being stored?
** Where do we get it?
** How was it created?
* Base 64 why?

image::stop.png[width="20%", height="20%", align="center"]
