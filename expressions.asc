== Expressions

=== Expressions Defined

* Dynamically set and access variables during pipeline execution
* Any text field can use an expression
* Use them to:
** Use arbitrary values about the state of your system in the execution of your pipelines.
** Turn on or off particular stages or branches of your pipeline
** Dynamically name your stack
** Check the status of another stage
** Perform other operations.

=== What are expressions?

A pipeline expression is made up of $ followed by opening/closing brackets: `${ }`

[source, sh, subs="attributes,quotes,verbatim"]
----
${expression here}
----

=== String interpolation

[source, sh, subs="attributes,quotes,verbatim"]
----
 ${expressionA}-randomString-${expressionB}
----

Given "Hello" for `expressionA` and `world` for `expressionB`, this will result in:

[source, sh, subs="attributes,quotes,verbatim"]
----
Hello-randomString-world.
----

=== Where can Expressions be used?

* Pipeline expressions any place in the UI where you can enter free-form text
* Exception of the pipeline *Configuration* stage with exception of Expected Artifacts and "Use Default Artifact" 
* If text field is unavailable, there is a feature called *Edit as JSON*

=== When are they evaluated

* Expressions are evaluated at the beginning of that stage
* *Configuration* needs to be evaluated _before_ expression

=== Helper Functions

* Helper functions simplify common use cases
** Access a particular stage by name
** Strip non-alphanumerical characters
** Parse JSON

=== Finding Helper Functions

Adding a pound sign (`#`) within your pipeline expression displays a list of all the helper functions that are available

image::https://www.spinnaker.io/guides/user/pipeline/expressions/images/helper-func-autocomplete.png[]

=== Helper Properties

Helper properties are variables which refer to global information about the current pipeline execution.

* `execution` - refers to the current pipeline execution
* `trigger` - information about the pipeline trigger
** e.g. Jenkins trigger and want to know which build triggered the current pipeline
** `${trigger["buildInfo"]["number"]}`

=== Getting Help with Helper Properties

* List available helper properties and stages enter a question mark (`?`) into your pipeline expression
* Type a little more of what you are looking for to narrow down your choices

IMPORTANT: Once a helper property is added to the expression you can use any of the meta keys (Shift, Command, Alt, Control) to bring up a list of all the pipeline context that is relevant to the selected helper property.

image::https://www.spinnaker.io/guides/user/pipeline/expressions/images/helper-properties-list.png[]


=== Context Values

* _Context Values_ are specific to a stage.
* Includes:
** Stage Name
** Status 
** Start and End Time

=== Finding Context Values

.Go to an execution of your pipeline.
.Click on *Details* to expand the pipeline.
.Click on the source link under the pipeline execution, which opens a new tab containing the JSON details of your pipeline execution.

image::https://www.spinnaker.io/guides/user/pipeline/expressions/images/execution-json.png[width=75%, height=75%]

//TODO: Omitted Property Files on Purpose

=== Testing Pipeline Executions

* Testing is done through the API
* You need a running instance of Spinnaker
* Use *Source* of any stage and identify the pipeline execution

image::https://www.spinnaker.io/guides/user/pipeline/expressions/images/execution-json.png[width=55%, height=55%]

=== Using `curl`

You can then use `curl` to test your expression

[source, sh, subs="attributes,quotes,verbatim"]
----
PIPELINE_ID=[your_pipeline_id]
curl http://api.my.spinnaker/pipelines/$PIPELINE_ID/evaluateExpression \
       -H "Content-Type: text/plain" \
       --data '${ #stage("Deploy").status.toString() }'
----

This then returns if successful

[source, sh, subs="attributes,quotes,verbatim"]
----
{"result": "SUCCEEDED"}
----

=== Pipeline Unsucessful

[source, sh, subs="attributes,quotes,verbatim"]
----
{
  "detail":
    {
      "{ #stage(\"Deploy\").status.toString() ":
        [
          {
            "description":
              "Failed to evaluate [expression] Expression
              [{ #stage( #root.execution, \"Deploy\").status.toString() ]
              @0: No ending suffix '}' for expression starting at character 0:
              { #stage( #root.execution, \"Deploy\").status.toString() ",
            "exceptionType":"org.springframework.expression.ParseException",
            "level":"ERROR",
            "timestamp":1531254890849
         }
        ]
   },
  "result":"${#stage(\"Deploy\").status.toString() "
}
----
