== Appendix: Installing in AWS EKS

=== System Requirements

* 18 GB of RAM
* A 4 core CPU
* Ubuntu 14.04, 16.04 or 18.04

=== Installing EKS on Amazon

* For Production on AWS, using `eksctl`
* The following command will create maximum of 4 node for spinnaker
* Select appropriate node types, in this case _t2.xlarge_, although for this class _t3.medium_
* This will create a node group called `spin-eks-node`

[source, sh, subs="attributes,quotes,verbatim"]
----
eksctl create cluster \
    --name eks-prod \
    --version 1.14 \
    --nodegroup-name eks-prod-nodegroup \
    --node-type t3.medium \
    --nodes 4 \
    --nodes-min 0 \
    --nodes-max 4 \
    --node-ami auto \
    --write-kubeconfig=false

eksctl create cluster \
    --name eks-stage \
    --version 1.14 \
    --nodegroup-name eks-stage-nodegroup \
    --node-type t3.medium \
    --nodes 4 \
    --nodes-min 0 \
    --nodes-max 4 \
    --node-ami auto \
    --write-kubeconfig=false
----

WARNING: The instructions on the spinnaker website are horrible and the CloudFormation templates are old

NOTE: This can take a few minutes to get started

=== Update your `kubeconfig` file

Before running your process please backup your original `kubectl` file

[source, sh, subs="attributes,quotes,verbatim"]
----
aws2 eks update-kubeconfig --name eks-prod --region us-west-2 --alias eks-prod
aws2 eks update-kubeconfig --name eks-stage --region us-west-2 --alias eks-stage
----

=== Change Context to Use Kubernetes on EKS

Find all the current contexts to use in Kubernetes
[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl config get-contexts
----

Select the context that was just updated by `aws eks update-kubeconfig`

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl config use-context <name>
----

Determine that your nodes are running

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl get nodes --all-namespaces
----

=== Halyard

image::halyard.png[width=50%, height=60%]

==== Enabling Kubernetes Cloud Using Haylard

* Halyard is a tool that uploads the kubernetes configuration files for you
* Accounts are just variable names representing external services
* Ensure that you are in the right context in Kubernetes

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config provider kubernetes enable
kubectl config use-context eks-prod
hal config provider kubernetes account add eks-prod --provider-version v2 --context $(kubectl config current-context)
kubectl config use-context eks-stage
hal config provider kubernetes account add eks-stage --provider-version v2 --context $(kubectl config current-context)
----

==== Enable external resources (called artifacts)

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config features edit --artifacts true
----

To view a list of your Halyard Kubernetes accounts _after enabling kubernetes_

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config provider kubernetes account list
----

==== Setting up Storage Solutions

* Set up persistent storage for your Spinnaker instance by choosing one of the options below
* Ensure that the region supports S3
* You can find your `ACCESS_KEY_ID` and your `AWS_SECRET_ACCESS_KEY` in `~/.aws/credentials`
* Use the same region as your kubernetes cluster, this was displayed by `eksctl`

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config storage s3 edit \
    --access-key-id $YOUR_ACCESS_KEY_ID \
    --secret-access-key \
    --region $REGION
----

==== Linking Halyard to S3

Finally set up the storage to S3 for Halyard so it knows what to do

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config storage edit --type s3
----

==== Setting up a Service Account to Prod

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl config use-context eks-prod
CONTEXT=$(kubectl config current-context)
kubectl apply --context $CONTEXT -f https://spinnaker.io/downloads/kubernetes/service-account.yml
TOKEN=$(kubectl get secret --context $CONTEXT \
   $(kubectl get serviceaccount spinnaker-service-account \
       --context $CONTEXT \
       -n spinnaker \
       -o jsonpath='{.secrets[0].name}') \
   -n spinnaker \
   -o jsonpath='{.data.token}' | base64 --decode)
kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN
kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user
----

==== Setting up a Service Account to Stage

[source, sh, subs="attributes,quotes,verbatim"]
----
#Setting up Credentials for Stage

kubectl config use-context eks-stage
CONTEXT=$(kubectl config current-context)
kubectl apply --context $CONTEXT -f https://spinnaker.io/downloads/kubernetes/service-account.yml
TOKEN=$(kubectl get secret --context $CONTEXT \
   $(kubectl get serviceaccount spinnaker-service-account \
       --context $CONTEXT \
       -n spinnaker \
       -o jsonpath='{.secrets[0].name}') \
   -n spinnaker \
   -o jsonpath='{.data.token}' | base64 --decode)
kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN
kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user
----

==== Tell `hal` where to deploy

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config provider kubernetes account add eks-stage --provider-version v2 --context eks-stage
----

=== Deploy Spinnaker

List the available versions:

[source, sh, subs="attributes,quotes,verbatim"]
----
hal version list
----
You can follow the links to the versionsâ€™ respective changelogs to see what features each adds.

Set the version you want to use:

[source, sh, subs="attributes,quotes,verbatim"]
----
hal config version edit --version $VERSION
----

==== Deploy Spinnaker

[source, sh, subs="attributes,quotes,verbatim"]
----
hal deploy apply
----

==== Undeploy Spinnaker

[source, sh, subs="attributes,quotes,verbatim"]
----
hal deploy clean
----

NOTE: The information is persisted on S3

=== Connect to Spinnaker UI

[source, sh, subs="attributes,quotes,verbatim"]
----
hal deploy connect
----

* This command automatically forwards ports 9000 (Deck UI) and 8084 (Gate API service).
* Navigate to https://localhost:9000
* Give it some time, the services need to start
* Determine the status by running the following:

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl get pods --namespace spinnaker
----

or

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl get pods --namespace spinnaker
----

==== If you ever need to expose publicly

* Everything in Spinnaker is a microservice interacting with one another
* As such, we can expose these services

[source, sh, subs="attributes,quotes,verbatim"]
----
export NAMESPACE=spinnaker
kubectl -n ${NAMESPACE} expose service spin-gate --type LoadBalancer --port 80 --target-port 8084 --name spin-gate-public
kubectl -n ${NAMESPACE} expose service spin-deck --type LoadBalancer --port 80 --target-port 9000 --name spin-deck-public

export API_URL=$(kubectl -n $NAMESPACE get svc spin-gate-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
export UI_URL=$(kubectl -n $NAMESPACE get svc spin-deck-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

hal config security api edit --override-base-url http://$API_URL
hal config security ui edit --override-base-url http://$UI_URL

hal deploy apply

kubectl -n spinnaker get svc
----



==== Something is wrong?

It is worth while at time when you get started to look at the logs of your `pod`

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl logs <pod-name> -n <namespace>
----

or 

[source, sh, subs="attributes,quotes,verbatim"]
----
kubectl describe <pod-name> -n <namespace>
----


==== Deleting your cluster

[source, sh, subs="attributes,quotes,verbatim"]
----
eksctl delete cluster --name my-eks-cluster
----

// === Installing Spinnaker
// 
// kubectl apply -f aws-auth-cm.yaml https://community.spinnaker.io/t/installing-spinnaker-on-eks/723
// 
// [source, sh, subs="attributes,quotes,verbatim"]
// ----
// hal config provider kubernetes enable
// hal config provider kubernetes account add spinnaker-account --provider-version v2 --context tdc-apps --kubeconfig-file ~/.hal/kube/config_apps-user
// hal config provider kubernetes account edit spinnaker-account --add-namespace tdc-apps
// hal config features edit --artifacts true
// hal config deploy edit --type distributed --account-name spinnaker-account
// hal config storage s3 edit --bucket s3-spinnaker --root-folder front50 --access-key-id xxxxxx --secret-access-key
// hal config storage edit --type s3
// hal version list
// hal config version edit --version 1.9.4
// hal deploy apply
// ----
