== Continuous Integration and Delivery

=== Continuous Integration
* Taking code and integrating and testing with every check in!
* Employs Continuous Integration (CI) Server
** Jenkins
** Bamboo
** Cruise Control
** Travis

=== Extending CI with Spinnaker

* Spinnaker takes content created in CI and deploys to staging and production
* Jenkins could do that to a point:
** It does not manage multiple servers too well
** Jenkins (not JenkinsX) doesn't work that well with Kubernetes

=== Continuous Integration

* Tool that monitors version control of changes
* When a change is detected, the tool will automatically
** compile
** test
** report
* Overtime reports on the overall code quality of your project

=== Why Continuous Integration?

* Confidence that a release will perform
* Fully automated testing
* Ability to have a "one click" deploy
* Repeated and reliable
* Enhances Collaboration Among Developers
** Builds are no longer secret
** No longer require the use of deployment expert
* Manual building is fairly stupid
* Process seen in action! You know if it works or doesn't

=== Purpose of a CI Server

* Configured to watch your version control system
* Check out or update your source code every time a change is made
* Run the automated build process
* Store the binaries where they are accessible to the whole team
* Reducing risk by providing faster feedback
* Identify and fix integration and regression issues faster

=== How does CI Improve Software Quality

* Everyone has information on the build at every single moment
* Developers are aware of the constant change in their project
* Notifications to all Developers when the build fails

=== Provide Value to the End User Faster

* Ensures that software is build, tested, and maintained regularly
* There is always a deployment of some kind
* Deployments are no longer magical mystery events that happen every month

=== Empowering Teams

* Continuous Integration can deploy onto the servers themselves.
* Power to real time view results
* There will be no longer the uber-operations-specialist
* Expand the role of the developer include operations.

=== Reducing Errors

* Ensures the correct version, configuration, database schema, etc. are applied the same way every time through automation
* Staging areas are equivalent to production areas
* Less surprises.
* No more hidden configuration that we don’t know about at production time

=== Lowers Stress

* A Release becomes commonplace without the typical stress
* No weekend battles
* Less embarrassing releases
* Rollback versions easily to a well known build

=== Deployment Flexibility

* Instantiate a new environment or configuration by making a few changes to the automated delivery system.
* Create multiple version of environments

=== Practice Makes Perfect

* Final deployment into production is being rehearsed every single time the software is deployed to any target environments.
* Overtime deployment becomes standard practice
* Check in frequently
* Don’t check in broken code
* Don’t check in untested code
* Don’t check in when the build is broken
* Don’t go home after checking in until the system builds
* Every Check in is a potential release!

=== Will it happen overnight?

* It will take time for all those invested
* Testing will have to be commonplace
* Commitments in code will have to be small
* Behaviors and rituals will need to change

=== How does CI help release on time?

* Automation, Automation, Automation, Automation
* Humans are slow, why not let computers do the work?
* Problems no longer are debt: If anything fails it must be fixed immediately
* Bugs, along with testing, are squashed oftentimes permanently!
* Lessens the fear of "integration hell"
* Lessens the fear of production deployment!

=== Future is Here

* Spinnaker, Jenkins, and Kubernetes allows for IaC (Infrastructure as Code)
* Continuous Integration is committed as code, using `Jenkinsfile`
* Kuberenetes `replicaSet`, `deployment`, `ingress`, etc are all `yaml` files
* Spinnaker can use these files to deploy fleet of systems
