== Baking

Baking turns templates into manifests with the help of a templating engine. 
Helm relies on the `helm template` command.

=== Reminder on Helm Templates

We can take any `yaml` resource meant for Kubernetes

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  myvalue: "Hello World"
----

=== Templatize Helm Templates:

We can then templatize it with a release, called _release name_

[source, yaml, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
----

`{{ .Release.Name }}` will be replaced by the name of the release when the end user runs


=== Debugging our Chart

[source, sh, subs="attributes,quotes,verbatim"]
----
helm install --debug --dry-run goodly-guppy ./mychart
----

=== Result Chart 

[source, sh, subs="attributes,quotes,verbatim"]
----
apiVersion: v1
kind: ConfigMap
metadata:
  name: goodly-guppy-configmap
data:
  myvalue: "Hello World"
----

=== Helm Charts offers a lot

* Values
* Defaults
* Template Functions and Pipelines
* Flow Control
* Variables
* Embedded Templates

Read more: https://helm.sh/docs/chart_template_guide/getting_started/

=== Intentions

This stage is intended to help you package and deploy applications that you own,
and are actively developing and redeploying frequently. It is not intended to
serve as a one-time installation method for third-party packages. If that
is your goal, it’s arguably better to call helm install once when
bootstrapping your Kubernetes cluster.

=== Configure Artifact support in Hal

* Make sure that you have configured artifact support in Spinnaker first in Halyard
* All Helm charts are fetched/stored as artifacts in Spinnaker

=== Create a Bake Manifest Stage

* Create a "Bake (Manifest)" stage

image::bake_manifest.png[width="30%", height="30%"]

=== Configure the Bake Manifest Stage

image::bake_manifest_config_1.png[width="80%", height="80%"]
image::bake_manifest_config_2.png[width="80%", height="80%"]

=== Configure the Bake Manifest Stage Detail

* Enter the release name (required) - The Helm release name for this chart. This determines the name of the artifact produced by this stage
* The template artifact (required) - The Helm chart that you will be deploying, stored remotely as a `.tar.gz` archive
* The release namespace - The Kubernetes namespace to install release into. If parameter is not specified default namespace will be used
* Zero or more override artifacts (optional) - The files passed to `--values` parameter in the helm template command. Each is a remotely stored artifact representing a Helm Value File.
* Statically specified overrides - The set of static of `key/value` pairs that are passed as `--set` parameters to the `helm template` command.

=== Helm Charts and Namespace

Make sure you have `namespace` declaration in your helm chart if you are overriding the `namespace`

[source, yaml, subs="attributes,quotes,verbatim"]
----
metadata:
  namespace: {{ .Release.Namespace }}
----

=== Producing Baked Artifacts

In the “Produces Artifacts” section:

* Spinnaker has automatically created an `embedded/base64` artifact
* The artifact is bound when the stage completes
* Represents the fully baked manifest set to be deployed downstream

image::https://www.spinnaker.io/guides/user/kubernetes-v2/deploy-helm/produces.png[]

=== Configure Downstream Deployment

Now that the manifest set has been baked by Helm

* Configure a downstream stage (in the same pipeline or in one triggered by this pipeline)
* Deploy the artifact produced by the “Bake (Manifest)” stage

image::https://www.spinnaker.io/guides/user/kubernetes-v2/deploy-helm/expected-artifact.png[]

NOTE: Note: Make sure to select "embedded-artifact" as the artifact account for your `base64` manifest set. 
This is required to translate the manifest set into the format required by the deploy stage.

